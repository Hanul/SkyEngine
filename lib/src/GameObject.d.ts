import EventContainer from "eventcontainer";
import * as PIXI from "pixi.js";
export default abstract class GameObject extends EventContainer {
    parent: GameObject | undefined;
    target: GameObject | undefined;
    children: GameObject[];
    pixiContainer: PIXI.Container;
    private _x;
    private _y;
    private _zIndex;
    centerX: number;
    centerY: number;
    realX: number;
    realY: number;
    drawingX: number;
    drawingY: number;
    private _speedX;
    private _speedY;
    accelX: number;
    accelY: number;
    minSpeedX: number | undefined;
    minSpeedY: number | undefined;
    maxSpeedX: number | undefined;
    maxSpeedY: number | undefined;
    toX: number;
    toY: number;
    private _scaleX;
    private _scaleY;
    realScaleX: number;
    realScaleY: number;
    private _scalingSpeedX;
    private _scalingSpeedY;
    realScalingSpeedX: number;
    realScalingSpeedY: number;
    scalingAccelX: number;
    scalingAccelY: number;
    minScalingSpeedX: number;
    minScalingSpeedY: number;
    maxScalingSpeedX: number;
    maxScalingSpeedY: number;
    toScaleX: number;
    toScaleY: number;
    private _angle;
    realRadian: number;
    realSin: number;
    realCos: number;
    private _rotationSpeed;
    rotationAccel: number;
    minRotationSpeed: number | undefined;
    maxRotationSpeed: number | undefined;
    toAngle: number;
    alpha: number;
    private _fadingSpeed;
    fadingAccel: number;
    minFadingSpeed: number | undefined;
    maxFadingSpeed: number | undefined;
    toAlpha: number;
    blendMode?: PIXI.BLEND_MODES;
    collider?: GameObject;
    touchArea?: GameObject;
    dom?: HTMLElement;
    domStyle?: {
        [key: string]: string | number;
    };
    forceCollisionCheck?: boolean;
    private _yToZIndex;
    constructor(x: number, y: number);
    addToPixiContainer(pixiChild: PIXI.Container): void;
    removeFromPixiContainer(pixiChild: PIXI.Container): void;
    private removeFromParent;
    private appendToParent;
    private genRealPosition;
    set x(x: number);
    get x(): number;
    set y(y: number);
    get y(): number;
    set zIndex(zIndex: number);
    get zIndex(): number;
    set speedX(speedX: number);
    get speedX(): number;
    set speedY(speedY: number);
    get speedY(): number;
    set scaleX(scaleX: number);
    get scaleX(): number;
    set scaleY(scaleY: number);
    get scaleY(): number;
    set scale(scale: number);
    set scalingSpeedX(scalingSpeedX: number);
    get scalingSpeedX(): number;
    set scalingSpeedY(scalingSpeedY: number);
    get scalingSpeedY(): number;
    set scalingSpeed(scalingSpeed: number);
    set scalingAccel(scalingAccel: number);
    set minScalingSpeed(minScalingSpeed: number);
    set maxScalingSpeed(maxScalingSpeed: number);
    set toScale(toScale: number);
    set angle(angle: number);
    get angle(): number;
    set rotationSpeed(rotationSpeed: number);
    get rotationSpeed(): number;
    set fadingSpeed(fadingSpeed: number);
    get fadingSpeed(): number;
    set yToZIndex(yToZIndex: boolean);
    get yToZIndex(): boolean;
    addFilter(filter: PIXI.Filter): void;
    deleteFilter(filter: PIXI.Filter): void;
}
//# sourceMappingURL=GameObject.d.ts.map